// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OrienteeringUkraine.Data;

namespace OrienteeringUkraine.Data.Migrations
{
    [DbContext(typeof(OrienteeringUkraineContext))]
    [Migration("20201231095234_UsersConfigurated")]
    partial class UsersConfigurated
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("OrienteeringUkraine.Domain.Entities.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("UserLogin")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserLogin");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("OrienteeringUkraine.Domain.Entities.Club", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("Clubs");
                });

            modelBuilder.Entity("OrienteeringUkraine.Domain.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.Property<string>("UserLogin")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.HasIndex("UserLogin");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("OrienteeringUkraine.Domain.Entities.LoginData", b =>
                {
                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Login");

                    b.ToTable("Logins");
                });

            modelBuilder.Entity("OrienteeringUkraine.Domain.Entities.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("OrienteeringUkraine.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("OrienteeringUkraine.Domain.Entities.User", b =>
                {
                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<int?>("ClubId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("Sex")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Login");

                    b.HasIndex("ClubId");

                    b.HasIndex("RegionId");

                    b.HasIndex("RoleId");

                    b.HasIndex("Surname");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("OrienteeringUkraine.Domain.Entities.Application", b =>
                {
                    b.HasOne("OrienteeringUkraine.Domain.Entities.User", null)
                        .WithMany("Applications")
                        .HasForeignKey("UserLogin");
                });

            modelBuilder.Entity("OrienteeringUkraine.Domain.Entities.Event", b =>
                {
                    b.HasOne("OrienteeringUkraine.Domain.Entities.Region", null)
                        .WithMany("Events")
                        .HasForeignKey("RegionId");

                    b.HasOne("OrienteeringUkraine.Domain.Entities.User", null)
                        .WithMany("Events")
                        .HasForeignKey("UserLogin");
                });

            modelBuilder.Entity("OrienteeringUkraine.Domain.Entities.LoginData", b =>
                {
                    b.HasOne("OrienteeringUkraine.Domain.Entities.User", "User")
                        .WithOne("LoginData")
                        .HasForeignKey("OrienteeringUkraine.Domain.Entities.LoginData", "Login")
                        .HasConstraintName("FK_Users_Logins")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OrienteeringUkraine.Domain.Entities.User", b =>
                {
                    b.HasOne("OrienteeringUkraine.Domain.Entities.Club", "Club")
                        .WithMany("Users")
                        .HasForeignKey("ClubId")
                        .HasConstraintName("FK_Users_Clubs");

                    b.HasOne("OrienteeringUkraine.Domain.Entities.Region", "Region")
                        .WithMany("Users")
                        .HasForeignKey("RegionId")
                        .HasConstraintName("FK_Users_Regions")
                        .IsRequired();

                    b.HasOne("OrienteeringUkraine.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_Users_Roles")
                        .IsRequired();

                    b.Navigation("Club");

                    b.Navigation("Region");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("OrienteeringUkraine.Domain.Entities.Club", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("OrienteeringUkraine.Domain.Entities.Region", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("OrienteeringUkraine.Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("OrienteeringUkraine.Domain.Entities.User", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Events");

                    b.Navigation("LoginData");
                });
#pragma warning restore 612, 618
        }
    }
}
